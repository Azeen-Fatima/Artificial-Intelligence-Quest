#Implementing stack

class Stack:
    def __init__(self):
        self.stack = []
    def push(self, x):
        self.stack.append(x)
        print("Pushed", x, "in stack")
    def pop(self):
        if not self.is_empty():
            return self.stack.pop()
        return "Stack is empty"
    def is_empty(self):
        return len(self.stack) == 0
    def display(self):
        print("Stack:", self.stack)
    def peek(self):
        if not self.is_empty():
            return self.stack[-1]
        return "Stack is empty"

# Creating object 
s = Stack()
s.push(10)
s.push(20)
s.display()

#User input
print("\n")
while True:
        a = int(input("Do you want to add elements in stack? (1 = Yes, 0 = No): "))
        if a == 1:
            b = int(input("Enter element: "))
            s.push(b)
        elif a == 0:
            s.display()
            print("Thanks!")
            break
        else:
            print("Invalid choice.Try again...")
print("\n")
while True:
    if not s.is_empty():
        c=int(input("Do you want to see top element of stack? (1 = Yes, 0 = No): ")) 
        if c==1:
            print("Top element: " , s.peek())
        elif c==0:
            print("Okay!")
            break
        else:
            print("Invalid Choice.Try again...")
    elif s.is_empty():
        print("Stack is empty!")
        break
print("\n")
while True:
    if not s.is_empty():
        d=int(input("Do you want to delete top element of stack? (1 = Yes, 0 = No): ")) 
        if d==1:
            s.pop()
        elif d==0:
            print("Okay!")
            s.display()
            break
        else:
            print("Invalid Choice.Try again...")
    elif s.is_empty():
        print("Stack is empty!")
        break
print("\n")
        

